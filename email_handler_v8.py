#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ú–æ–¥—É–ª—å —Ä–∞–±–æ—Ç—ã —Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç–æ–π v8.0
–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∏—Å–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
–ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø v8.0:
- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã—Ö email —à–∞–±–ª–æ–Ω–æ–≤ –∏–∑ OneDrive
- –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏
- –£–ª—É—á—à–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
"""

import smtplib
import ssl
import os
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.mime.application import MIMEApplication
from datetime import datetime
from imap_tools import MailBox, AND
from logger import get_logger

logger = get_logger(__name__)

class EmailHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã v8.0"""

    def __init__(self, config):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞"""
        self.config = config

    def test_imap_connection(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ IMAP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        try:
            with MailBox(self.config.imap_server, port=self.config.imap_port).login(
                self.config.imap_user,
                self.config.imap_password,
                'INBOX'
            ) as mailbox:
                logger.info("IMAP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ IMAP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {str(e)}")
            return False

    def test_smtp_connection(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SMTP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        try:
            if self.config.smtp_port == 465:
                context = ssl.create_default_context()
                with smtplib.SMTP_SSL(self.config.smtp_server, self.config.smtp_port, context=context) as server:
                    server.login(self.config.smtp_user, self.config.smtp_password)
                    logger.info("SMTP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                    return True
            else:
                with smtplib.SMTP(self.config.smtp_server, self.config.smtp_port) as server:
                    server.starttls()
                    server.login(self.config.smtp_user, self.config.smtp_password)
                    logger.info("SMTP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                    return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ SMTP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {str(e)}")
            return False

    def get_unread_emails_with_excel(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –ø–∏—Å–µ–º —Å Excel –≤–ª–æ–∂–µ–Ω–∏—è–º–∏"""
        try:
            emails_with_excel = []
            with MailBox(self.config.imap_server, port=self.config.imap_port).login(
                self.config.imap_user,
                self.config.imap_password,
                'INBOX'
            ) as mailbox:
                # –ü–æ–∏—Å–∫ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –ø–∏—Å–µ–º
                for msg in mailbox.fetch(AND(seen=False)):
                    excel_attachments = []
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–ª–æ–∂–µ–Ω–∏–π
                    for attachment in msg.attachments:
                        if attachment.filename and attachment.filename.lower().endswith(('.xlsx', '.xls')):
                            file_size_mb = len(attachment.payload) / (1024 * 1024)
                            if file_size_mb <= self.config.max_file_size_mb:
                                excel_attachments.append({
                                    'filename': attachment.filename,
                                    'content': attachment.payload,
                                    'size_mb': round(file_size_mb, 2)
                                })
                                logger.info(f"–ù–∞–π–¥–µ–Ω–æ Excel –≤–ª–æ–∂–µ–Ω–∏–µ: {attachment.filename} ({file_size_mb:.2f} –ú–ë)")
                            else:
                                logger.warning(f"–§–∞–π–ª {attachment.filename} –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä ({file_size_mb:.2f} –ú–ë)")

                    if excel_attachments:
                        emails_with_excel.append({
                            'uid': msg.uid,
                            'sender': msg.from_,
                            'subject': msg.subject,
                            'date': msg.date,
                            'attachments': excel_attachments
                        })
                        logger.info(f"–ü–∏—Å—å–º–æ –æ—Ç {msg.from_} —Å–æ–¥–µ—Ä–∂–∏—Ç {len(excel_attachments)} Excel —Ñ–∞–π–ª–æ–≤")

            return emails_with_excel
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–∏—Å–µ–º: {str(e)}")
            return []

    def send_processed_file_v8(self, file_path, original_filename, sender_email, email_template=None, processing_stats=None):
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ v8.0 —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤
        """
        try:
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —à–∞–±–ª–æ–Ω–∞ v8.0
            now = datetime.now()
            
            # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –Ω–∞–±–æ—Ä –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è v8.0
            template_data = {
                'source_filename': original_filename,
                'output_filename': os.path.basename(file_path),
                'sender_email': sender_email,
                'processing_date': now.strftime("%Y-%m-%d %H:%M:%S"),
                'processing_date_short': now.strftime("%Y-%m-%d"),
                'processing_time': now.strftime("%H:%M"),
                'processed_rows': processing_stats.get('processed_rows', 0) if processing_stats else 0,
                'applied_rules': processing_stats.get('applied_rules', 0) if processing_stats else 0,
                'created_columns': processing_stats.get('created_columns', 0) if processing_stats else 0,
                'custom_content': self._get_custom_content(processing_stats),
                'footer_text': self._get_footer_text(email_template)
            }

            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–º—ã –∏ —Ç–µ–∫—Å—Ç–∞ –ø–∏—Å—å–º–∞ v8.0
            if email_template and 'body_template' in email_template:
                # –ù–æ–≤—ã–π –ø–æ–¥—Ö–æ–¥ v8.0: –ø–æ–ª–Ω—ã–π —à–∞–±–ª–æ–Ω –∏–∑ OneDrive
                subject = email_template.get('subject', '–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ñ–∞–π–ª: {output_filename}').format(**template_data)
                body = email_template['body_template'].format(**template_data)
                logger.info("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–π —à–∞–±–ª–æ–Ω –ø–∏—Å—å–º–∞ v8.0 –∏–∑ OneDrive")
            elif email_template:
                # –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å v6.0
                subject = email_template.get('subject', '–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ñ–∞–π–ª: {output_filename}').format(**template_data)
                body = self._build_legacy_email_body(email_template, template_data)
                logger.info("üìß –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —à–∞–±–ª–æ–Ω –ø–∏—Å—å–º–∞ v6.0")
            else:
                # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —à–∞–±–ª–æ–Ω
                subject = f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ñ–∞–π–ª: {os.path.basename(file_path)}"
                body = self._get_default_email_body_v8().format(**template_data)
                logger.info("üìß –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —à–∞–±–ª–æ–Ω –ø–∏—Å—å–º–∞")

            # –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            msg = MIMEMultipart()
            msg['From'] = f"{self.config.sender_name} <{self.config.smtp_user}>"
            msg['To'] = self.config.recipient_email
            msg['Subject'] = subject

            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
            msg.attach(MIMEText(body, 'plain', 'utf-8'))

            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–ª–æ–∂–µ–Ω–∏—è
            with open(file_path, 'rb') as f:
                attachment = MIMEApplication(f.read(), _subtype='xlsx')
                attachment.add_header(
                    'Content-Disposition',
                    'attachment',
                    filename=os.path.basename(file_path)
                )
                msg.attach(attachment)

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å—å–º–∞
            if self.config.smtp_port == 465:
                context = ssl.create_default_context()
                with smtplib.SMTP_SSL(self.config.smtp_server, self.config.smtp_port, context=context) as server:
                    server.login(self.config.smtp_user, self.config.smtp_password)
                    server.send_message(msg)
            else:
                with smtplib.SMTP(self.config.smtp_server, self.config.smtp_port) as server:
                    server.starttls()
                    server.login(self.config.smtp_user, self.config.smtp_password)
                    server.send_message(msg)

            logger.info(f"‚úÖ Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ –Ω–∞ {self.config.recipient_email}")
            logger.info(f"üìß –¢–µ–º–∞: {subject}")
            logger.info(f"üìé –í–ª–æ–∂–µ–Ω–∏–µ: {os.path.basename(file_path)}")

            # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            if os.path.exists(file_path):
                os.unlink(file_path)
                logger.info(f"üóëÔ∏è –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω: {file_path}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ email: {str(e)}")
            raise

    def _get_custom_content(self, processing_stats):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –ø–∏—Å—å–º–∞"""
        if not processing_stats:
            return ""
            
        content_parts = []
        
        if processing_stats.get('applied_rules', 0) > 0:
            content_parts.append(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –ø—Ä–∞–≤–∏–ª–∞ –∑–∞–º–µ–Ω—ã –¥–ª—è {processing_stats['applied_rules']} —Ç–∏–ø–æ–≤ –∑–∞–ø–∏—Å–µ–π")
            
        if processing_stats.get('created_columns', 0) > 0:
            content_parts.append(f"üìä –î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤—ã—Ö –∫–æ–ª–æ–Ω–æ–∫: {processing_stats['created_columns']}")
            
        return "\n".join(content_parts)

    def _get_footer_text(self, email_template):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Ñ—É—Ç–µ—Ä–∞"""
        if email_template and 'footer_text' in email_template:
            return email_template['footer_text']
        return "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ Excel Mail Processor v8.0\n–û–û–û –¢–†–ê–ù–°–§–û–†–ê"

    def _build_legacy_email_body(self, email_template, template_data):
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–∏—Å—å–º–∞ –≤ —Å—Ç–∏–ª–µ v6.0 –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
        header = email_template.get('body_header', '–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ –¥–∏—Å–ª–æ–∫–∞—Ü–∏–∏ –≤–∞–≥–æ–Ω–æ–≤.')
        footer = email_template.get('body_footer', '–û–û–û –¢–†–ê–ù–°–§–û–†–ê')
        
        body = f"""{header}

–ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª: {template_data['source_filename']}
–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ñ–∞–π–ª: {template_data['output_filename']}
–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {template_data['sender_email']}
–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {template_data['processing_date']}

–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:
- –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç—Ä–æ–∫: {template_data['processed_rows']}
- –ü—Ä–∏–º–µ–Ω–µ–Ω–æ –ø—Ä–∞–≤–∏–ª –∑–∞–º–µ–Ω—ã: {template_data['applied_rules']}
- –°–æ–∑–¥–∞–Ω–æ –∫–æ–ª–æ–Ω–æ–∫: {template_data['created_columns']}


---
{footer}"""
        return body

    def _get_default_email_body_v8(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞ –ø–∏—Å—å–º–∞ v8.0"""
        template = """–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ –¥–∏—Å–ª–æ–∫–∞—Ü–∏–∏ –≤–∞–≥–æ–Ω–æ–≤.


–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∫ –ø–∏—Å—å–º—É: {output_filename}

---
{footer_text}"""
        return template

    def mark_emails_as_read(self, emails_data):
        """–ü–æ–º–µ—Ç–∫–∞ –ø–∏—Å–µ–º –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö"""
        try:
            with MailBox(self.config.imap_server, port=self.config.imap_port).login(
                self.config.imap_user,
                self.config.imap_password,
                'INBOX'
            ) as mailbox:
                uids = [email_data['uid'] for email_data in emails_data]
                mailbox.flag(uids, ['\\Seen'], True)
                logger.info(f"–ü–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö: {len(uids)} –ø–∏—Å–µ–º")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ –ø–∏—Å–µ–º –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö: {str(e)}")

    # –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å v6.0
    def send_processed_file(self, file_path, original_filename, sender_email, email_template=None):
        """–û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å v6.0"""
        return self.send_processed_file_v8(file_path, original_filename, sender_email, email_template)